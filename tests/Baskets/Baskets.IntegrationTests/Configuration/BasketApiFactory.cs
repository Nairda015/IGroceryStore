using System.Security.Claims;using Bogus;using DotNet.Testcontainers.Builders;using DotNet.Testcontainers.Configurations;using DotNet.Testcontainers.Containers;using IGroceryStore.API;using IGroceryStore.API.Initializers;using IGroceryStore.Shared.Contracts;using IGroceryStore.Shared.Tests.Auth;using MassTransit;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Mvc.Testing;using Microsoft.AspNetCore.TestHost;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Logging;using Microsoft.IdentityModel.JsonWebTokens;namespace IGroceryStore.Baskets.IntegrationTests.Configuration;public class BasketApiFactory : WebApplicationFactory<IApiMarker>, IAsyncLifetime{    private readonly MockUser _user;    private readonly TestcontainerDatabase _mongoContainer = new TestcontainersBuilder<MongoDbTestcontainer>()        .WithDatabase(new MongoDbTestcontainerConfiguration        {            Database = Guid.NewGuid().ToString(), Username = "admin", Password = "admin",        })        .WithAutoRemove(true)        .WithCleanUp(true)        .Build();    private readonly IDockerContainer _eventStoreContainer = new TestcontainersBuilder<TestcontainersContainer>()        .WithImage("ghcr.io/eventstore/eventstore:21.10.0-alpha-arm64v8")        .WithWaitStrategy(Wait.ForUnixContainer())        .WithAutoRemove(true)        .WithCleanUp(true)        .Build();    protected BasketApiFactory()    {        Randomizer.Seed = new Random(420);        VerifierSettings.ScrubInlineGuids();        _user = new MockUser(            new Claim(Shared.Constants.Claims.Name.UserId, "1"),            new Claim(JwtRegisteredClaimNames.Exp,                DateTimeOffset.UtcNow.AddSeconds(2137).ToUnixTimeSeconds().ToString()));    }    public HttpClient HttpClient { get; private set; } = default!;    protected override void ConfigureWebHost(IWebHostBuilder builder)    {        builder.ConfigureLogging(logging => { logging.ClearProviders(); });        builder.UseEnvironment(EnvironmentService.TestEnvironment);        builder.ConfigureServices(services =>        {            services.AddMassTransitTestHarness(x =>            {                x.AddHandler<UserCreated>(context => context.ConsumeCompleted);            });        });        builder.ConfigureTestServices(services =>        {            services.AddTestAuthentication();            services.AddSingleton<IMockUser>(_ => _user);        });    }    public async Task InitializeAsync()    {        await _mongoContainer.StartAsync();        await _eventStoreContainer.StartAsync();        HttpClient = CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });    }    async Task IAsyncLifetime.DisposeAsync()    {        await _eventStoreContainer.DisposeAsync();        await _mongoContainer.DisposeAsync();    }}